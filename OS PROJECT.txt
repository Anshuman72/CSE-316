/***Design A Scheduler Following Non-Preemptive Scheduling Approach To Schedule
	The Processes That Arrives At Different Units And Having Burst Time Double
	The Arrival Time.Scheduler Selects The Process With Largest Burst Time From
	The Queue For The Execution. Process Is Not Being Preempted Until It Finishes
	Its Service Time.Compute The Average Waiting Time And Average Turnaround Time.
    What Should Be The Average Waiting Time If Processes Are Executed According
    To Shortest Job First Scheduling Approach With The Same Attribute Values.****/


#include<fcntl.h>
#include<stdio.h>
#include <pthread.h>
#include<unistd.h>
#include <string.h>
#include<stdlib.h>



pthread_mutex_t plock; //lock for process Synchronization
int main()
{
    pthread_mutex_init(&plock, NULL);
    int i=0,j=0,a,p[10]={1,2,3,4,5,6,7,8,9,10},minimum,k=1,btime=0,bt[10],temp,at[10],wt[10],tt[10],ta=0,sum=0;
    float average_wt=0,average_tat=0,t_sum=0,w_sum=0;
    printf("Scheduling using SHORTEST JOB FIRST[NON PREEMPTIVE]\n");
    printf("\nEnter the total number of process To be Entered in the QUEUE:: ");
    scanf("%d",&a);

    while (i<a)
    {

        printf("\nFor P%d\n",i+1);
        pthread_mutex_lock(&plock);// lock for preemption
        label:
        printf("Arrival time:");
        scanf("%d",&at[i]);
        if (at[i]==0)
        {
            printf("\n Arrival time should not be zero!!!! Re-enter the correct arrival time \n");
            goto label;
        }
        bt[i]=at[i]*2;
        printf("Burst Time:%d\n",bt[i]);
        printf("----------------------------------------");
        pthread_mutex_unlock(&plock);//unlock for preemption
        i++;
    }

/*Sorting According to Arrival Time*/
i=0;
    while (i<a)
    {
        for(j=0;j<a;j++)
        {
            if(at[i]<at[j])
            {
                temp=p[j];
                p[j]=p[i];
                p[i]=temp;
                temp=at[j];
                at[j]=at[i];
                at[i]=temp;
                temp=bt[j];
                bt[j]=bt[i];
                bt[i]=temp;
            }
        }
        i++;
    }

j=0;

    while (j<a)
    {
        btime=btime+bt[j];
        minimum=bt[k];
        for(i=k;i<a;i++)
        {
            if (btime>=at[i] && bt[i]>minimum)
            {
                temp=p[k];
                p[k]=p[i];
                p[i]=temp;
                temp=at[k];
                at[k]=at[i];
                at[i]=temp;
                temp=bt[k];
                bt[k]=bt[i];
                bt[i]=temp;
            }
        }
        k++;
        j++;
    }

    wt[0]=0;
    for(i=1;i<a;i++)
    {
        wt[i]=0;
        for(int j=0;j<i;j++)
            wt[i]+=bt[j];
        w_sum+=wt[i];
    }

    average_wt=(w_sum/a);
    i=0;
    while (i<a)
    {
        ta=ta+bt[i];
        tt[i]=ta-at[i];
        t_sum=t_sum+tt[i];
        i++;
    }

    average_tat=(t_sum/a);

    printf("\n RESULT:-");
/*preparing the table which shows process,burst time,arrival time,waiting time and turn around time */
    printf("\nPROCESS\t BURST\t ARRIVAL\t WAITING\tTURN AROUND" );
    i=0;
    while (i<a)
    {
        printf("\n p%d\t %d\t %d\t\t %d\t\t%d",p[i],bt[i],at[i],wt[i],tt[i]);
        i++;
    }

    printf("\n\nAVERAGE TURN AROUND TIME : %f",average_tat);
    printf("\nAVERAGE WAITING TIME : %f",average_wt);

    return 0;
}